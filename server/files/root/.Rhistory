datasets::iris
disc$cutp
disc
data(iris)
disc=chiM(iris,alpha=0.05)
library(discretization)
library(discretization)
library(discretization)
library(discretization)
install.packages(discretization)
install.packages(”discretization“)
install.packages(”discretization“)
install.packages("discretization")
library(discretization)
data(iris)
disc=chiM(iris,alpha=0.05)
disc$cutp
disc$Disc.data
disc=chiM(iris,alpha=0.1)
disc$cutp
test <- numeric()
for (k in 1:(m - 1)) {
d <- b[c(k, k + 1), ]
test[k] = chiSq(d)
}
library(moments)
install.packages("moments")
library(moments)
alldata<-function(x){}
alldata<-function(x){
var<-var(x)
sd<-sd(x)
med<-median(x)
R<-range(x)
n<-length(x)
error<-(var/sqrt(n))
m<-mean(x)
skewness<-skewness(x)
data.frame(V=var,S=sd,Md=med,rag=R,N=n,Err=error,mea=m,Ske=skeweness)}
alldata(iris$Sepal.Length)
alldata<-function(x){
var<-var(x)
sd<-sd(x)
med<-median(x)
R<-range(x)
n<-length(x)
error<-(var/sqrt(n))
m<-mean(x)
skewness<-skewness(x)
data.frame(V=var,S=sd,Md=med,rag=R,N=n,Err=error,mea=m,Ske=skewness)}
alldata(iris$Sepal.Length)
discredata[,j]=cut(data[,j],breaks=midpoint,include.lowest=TRUE)
alldata(iris$Petal.Width)
alldata(iris$Sepal.Width)
alldata(iris$Petal.Length)
alldata(iris$Petal.Width)
alldata(iris$Petal.Width)
rm(list = ls())
alldata(iris$Petal.Length)
library(moments)
library(moments)
data<-iris
alldata<-function(data){
v <- var(data)
sd <- sd(data)
med <- median(data)
R <- range(data)
err <- sqrt(v/ length(data))
m <- mean(data)
ske <- skewness(data)
return(c(v, sd, med, R, err, m, ske))
}
alldata(iris$Sepal.Length)
alldata(iris$Sepal.Width)
alldata(iris$Petal.Length)
alldata(iris$Petal.Width)
library(discretization)
data(iris)
value <- function(i, data, alpha){
p1 <- length(data[1.])
p <- p1 - 1
y <- as.integer(data[, p1])
class <- dim(table(data[, p1]))
discredata <- data
threshold <- qchisq(1 - alpha, class - 1)
cuts <- numeric()
z <- sort(unique(data[, i]))
if(length(z) <= 1)
return (list(cuts = "", disc = discredata))
diff <- diff(z) / 2
lenz <- length(z)
cutpoint <- z[1: (lenz - 1)] + diff
midpoint <- c(z[1], cutpoint, z[lenz])
a <- cut(data[, i], breaks = midpoint, include.lowest = TRUE)
b <- table(a, data[, p1])
b <- as.array(b)
repeat{
m <- dim(b)[1]
if(length(dim(b)) < 2 || m < 2){
break
}
test <- numeric()
for( k in 1: (m - 1)){
d <- b[c(k, k + 1), ]
test[k] = chisq.test(d)
}
k <- which.min(test)
if(test[k] > threshold)
break
b[k + 1, ] <- b[k, ] + b[k+1, ]
cutpoint <- cutpoint[-k]
midpoint <- midpoint[-(k+1)]
b <- b[-k, ]
}
cuts <- cutpoint
discredata[, i] <- cut(data[, i], breaks = midpoint, include.lowest = TRUE,
label = FALSE)
return (list(cuts = cuts, disc = discredata))
}
disc = chiM(iris, alpha = 0.05)
disc$cutp
library(discretization)
data(iris)
value <- function(i, data, alpha){
p1 <- length(data[1.])
p <- p1 - 1
y <- as.integer(data[, p1])
class <- dim(table(data[, p1]))
discredata <- data
threshold <- qchisq(1 - alpha, class - 1)
cuts <- numeric()
z <- sort(unique(data[, i]))
if(length(z) <= 1)
return (list(cuts = "", disc = discredata))
diff <- diff(z) / 2
lenz <- length(z)
cutpoint <- z[1: (lenz - 1)] + diff
midpoint <- c(z[1], cutpoint, z[lenz])
a <- cut(data[, i], breaks = midpoint, include.lowest = TRUE)
b <- table(a, data[, p1])
b <- as.array(b)
repeat{
m <- dim(b)[1]
if(length(dim(b)) < 2 || m < 2){
break
}
test <- numeric()
for( k in 1: (m - 1)){
d <- b[c(k, k + 1), ]
test[k] = chisq.test(d)
}
k <- which.min(test)
if(test[k] > threshold)
break
b[k + 1, ] <- b[k, ] + b[k+1, ]
cutpoint <- cutpoint[-k]
midpoint <- midpoint[-(k+1)]
b <- b[-k, ]
}
cuts <- cutpoint
discredata[, i] <- cut(data[, i], breaks = midpoint, include.lowest = TRUE,
label = FALSE)
return (list(cuts = cuts, disc = discredata))
}
disc = chiM(iris, alpha = 0.05)
print disc$cutp
library(discretization)
data(iris)
value <- function(i, data, alpha){
p1 <- length(data[1.])
p <- p1 - 1
y <- as.integer(data[, p1])
class <- dim(table(data[, p1]))
discredata <- data
threshold <- qchisq(1 - alpha, class - 1)
cuts <- numeric()
z <- sort(unique(data[, i]))
if(length(z) <= 1)
return (list(cuts = "", disc = discredata))
diff <- diff(z) / 2
lenz <- length(z)
cutpoint <- z[1: (lenz - 1)] + diff
midpoint <- c(z[1], cutpoint, z[lenz])
a <- cut(data[, i], breaks = midpoint, include.lowest = TRUE)
b <- table(a, data[, p1])
b <- as.array(b)
repeat{
m <- dim(b)[1]
if(length(dim(b)) < 2 || m < 2){
break
}
test <- numeric()
for( k in 1: (m - 1)){
d <- b[c(k, k + 1), ]
test[k] = chisq.test(d)
}
k <- which.min(test)
if(test[k] > threshold)
break
b[k + 1, ] <- b[k, ] + b[k+1, ]
cutpoint <- cutpoint[-k]
midpoint <- midpoint[-(k+1)]
b <- b[-k, ]
}
cuts <- cutpoint
discredata[, i] <- cut(data[, i], breaks = midpoint, include.lowest = TRUE,
label = FALSE)
return (list(cuts = cuts, disc = discredata))
}
disc = chiM(iris, alpha = 0.05)
disc$cutp
library(discretization)
data(iris)
value <- function(i, data, alph){
p1 <- length(data[1.])
p <- p1 - 1
y <- as.integer(data[, p1])
class <- dim(table(data[, p1]))
ddate <- data
threshold <- qchisq(1 - alph, class - 1)
cuts <- numeric()
z <- sort(unique(data[, i]))
if(length(z) <= 1)
return (list(cuts = "", disc = ddate))
diff <- diff(z) / 2
lenz <- length(z)
cutpoint <- z[1: (lenz - 1)] + diff
midpoint <- c(z[1], cutpoint, z[lenz])
a <- cut(data[, i], breaks = midpoint, include.lowest = TRUE)
b <- table(a, data[, p1])
b <- as.array(b)
repeat{
m <- dim(b)[1]
if(length(dim(b)) < 2 || m < 2){
break
}
test <- numeric()
for( k in 1: (m - 1)){
d <- b[c(k, k + 1), ]
test[k] = chisq.test(d)
}
k <- which.min(test)
if(test[k] > threshold)
break
b[k + 1, ] <- b[k, ] + b[k+1, ]
cutpoint <- cutpoint[-k]
midpoint <- midpoint[-(k+1)]
b <- b[-k, ]
}
cuts <- cutpoint
ddate[, i] <- cut(data[, i], breaks = midpoint, include.lowest = TRUE,
label = FALSE)
return (list(cuts = cuts, disc = ddate))
}
disc = chiM(iris, alph = 0.05)
disc$cutp
TestbedMonJun14Flows <- read.csv("C:/Users/fa1con/homework/digital_dig/big_homework/TestbedMonJun14Flows.txt")
View(TestbedMonJun14Flows)
summary(TestbedMonJun14Flows)
names(TestbedMonJun14Flows)
fit<-rpart(Tag~totalSourceBytes+totalDestinationPackets+totalDestinationBytes+ totalSourcePackets+direction+sourcePort, TestbedMonJun14Flows, method = "class")
library(rpart)
fit<-rpart(Tag~totalSourceBytes+totalDestinationPackets+totalDestinationBytes+ totalSourcePackets+direction+sourcePort, TestbedMonJun14Flows, method = "class")
print(fit)
printcp(fit)
plotcp(fit)
plot(fit, uniform=T, branch=0.6, compress=T)
text(fit, use.n=T)
train<-TestbedMonJun14Flows[0:160000,]
fit2 <- prune(fit, cp=0.016)
plot(fit2, uniform=T, branch=0.6, compress=T)
text(fit2, use.n=T)
plot(fit,margin = 0.1)
text(fit,all = T,use.n = T)
testset <- TestbedMonJun14Flows[160001:170000,]
testset<-TestbedMonJun14Flows[160001:170000,]
predictions<-predict(fit2,testset,type = "class")
count_right <- function(tree,data_test){
n <- length(tree)
count <- 0
i <- 1
for (i in 1:n){
if (tree[i]==data_test[i,]$Tag){
count = count+1
}
}
print(count/n)
}
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right(predictions,testset)
predictions<-predict(fit1,testset,type = "class")
predictions<-predict(fit,testset,type = "class")
count_right(predictions,testset)
testset<-TestbedMonJun14Flows[300:6000,]
count_right(predictions,testset)
testset<-TestbedMonJun14Flows[160000:165000,]
count_right(predictions,testset)
predictions<-predict(fit,testset,type = "class")
count_right(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions,testset)
testset<-TestbedMonJun14Flows[16001:17000,]
predictions<-predict(fit,testset,type = "class")
table(testset$Tag,predictions)
testset<-TestbedMonJun14Flows[160001:170000,]
predictions<-predict(fit,testset,type = "class")
table(testset$Tag,predictions)
testset<-TestbedMonJun14Flows[150001:170000,]
predictions<-predict(fit,testset,type = "class")
table(testset$Tag,predictions)
predictions<-predict(fit2,testset,type = "class")
table(testset$Tag,predictions)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(predictions)
count_right2(predictions,testset)
train<-TestbedMonJun14Flows[0:140000,]
fit3 <- rpart(Tag~totalSourceBytes+totalDestinationPackets+totalDestinationBytes+totalSourcePackets+direction+sourcePort, train, method = "class")
testset<-TestbedMonJun14Flows[150000:160000,]
predictions<-predict(train,testset,type = "class")
predictions<-predict(fit3,testset,type = "class")
table(testset$Tag,predictions)
count_right(fit3,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right(fit3,testset)
count_right2(fit3,testset)
count_right(fit3,testset)
count_right <- function(tree,data_test){
n <- length(tree)
count <- 0
i <- 1
for (i in 1:n){
if (tree[i]==data_test[i,]$Tag){
count = count+1
}
}
print(count/n)
}
count_right <- function(tree,data_test){
n <- length(tree)
count1 <- 0
count2 <- 0
i <- 1
for (i in 1:n){
if ("Normal"==data_test[i,]$Tag){
count1 = count1+1
}
}
for (i in 1:n){
if ("Normal"==tree[i]){
count2 = count2+1
}
}
print(data_test[1,]$Tag)
print (count1)
print (count2)
if(count1 > count2){
print(1-(count1-count2)/n)
}else{
print(1-(count2-count1)/n)
}
}
count_right(fit3,testset)
count_right2(fit3,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
predictions<-predict(fit3,testset,type = "class")
count_right2(fit3,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(fit3,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right2(fit3,testset)
count_right(fit3,testset)
count_right(predictions,testset)
count_right2(fit3,testset)
count_right2(predictions,testset)
table(testset$Tag,predictions)
confusionMatrix(table(testset$Tag,predictions)）
confusionMatrix(table(testset$Tag,predictions))
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
accuracy_right(presidents,testset)
predictions<-predict(fit3,testset,type = "class")
accuracy_right(presidents,testset)
accuracy_right(predictions,testset)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
count_right(predictions,testset)
table(testset$Tag,predictions)
source('C:/Users/fa1con/EXE/Rstudio/count_right.R')
callback_rate(predictions,testset)
